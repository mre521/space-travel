#
# test.py - test for pygame
#

# imports
import math
import pygame.display
import pygame.time
import pygame.event
import pygame.draw
import pygame

from vector import Vector2D
from physics import Object2D
import physics
        
class AppState(object):
    DISPLAY_WIDTH = 640
    DISPLAY_HEIGHT = 480
    FRAMERATE = 60
    WINDOWED = True

    # state vars
    display = None
    clock = None
    active = False

    dynamics = physics.Dynamics()

    test = Object2D()

    objects = []

    # previous frame's time taken in seconds
    frametime = 1.0/FRAMERATE

    def __init__(self):
        
        l = Object2D()
        l.position.set(0, self.DISPLAY_HEIGHT/2)
        l.set_geometry((Vector2D(0,self.DISPLAY_HEIGHT/2),Vector2D(0, -self.DISPLAY_HEIGHT/2)))
        l.mass = 1#float('+inf')

        self.objects.append(l)
        self.dynamics.add_object(l)

        r = Object2D()
        r.position.set(self.DISPLAY_WIDTH, self.DISPLAY_HEIGHT/2)

        t = Object2D()
        t.position.set(self.DISPLAY_WIDTH/2, 0)
        t.set_geometry((Vector2D(-self.DISPLAY_WIDTH/2, 0), Vector2D(self.DISPLAY_WIDTH/2,0)))

        b = Object2D()
        b.position.set(self.DISPLAY_WIDTH/2, self.DISPLAY_HEIGHT)
        
        # testing the Object2D class with some arbitrary values
        test = self.test
        test.position.set(1.1*self.DISPLAY_WIDTH/3, self.DISPLAY_HEIGHT/2)
        #test.velocity.set(30, 0)
        #test.acceleration.set(0, 98.1)
        test.orientation = 0.0
        #test.ang_velocity = math.pi/2
        #test.ang_accel = 0.0
        test.mass = 0.1

        self.objects.append(test)
        self.dynamics.add_object(test)

        test.set_geometry(
            (Vector2D(-30, -30), Vector2D(-30, 30), Vector2D(30, 0)))

        test = Object2D()
        test.position.set(2*self.DISPLAY_WIDTH/3, 1.25*self.DISPLAY_HEIGHT/2)
        test.velocity.set(-10, 0)
        #test.acceleration.set(0, 98.1)
        test.orientation = 0.0
        test.ang_velocity = math.pi/10
        #test.ang_accel = 0.0
        test.mass = 0.1

        test.set_geometry(
            (Vector2D(-30, -40), Vector2D(-10, 50), Vector2D(60, -50), Vector2D(20, -70)))

        self.objects.append(test)
        self.dynamics.add_object(test)

    # create pygame window with appropriate properties
    def setup_display(self):
        flags = pygame.DOUBLEBUF
        if not self.WINDOWED:
            flags |= pygame.FULLSCREEN
        self.display = pygame.display.set_mode(
            [self.DISPLAY_WIDTH, self.DISPLAY_HEIGHT],
            flags)
        self.clock = pygame.time.Clock()

    # store frametime in correct units
    def set_frametime(self,milliseconds):
        # frametime has units of seconds
        # 1000ms in 1 second
        # seconds = ms/1000 seconds
        self.frametime = milliseconds/1000.0

    def handle_events(self, events):
        for event in events:
            if event.type == pygame.QUIT:
                self.active = False; # close button clicked

    def update_state(self):
        events = pygame.event.get()
        self.handle_events(events)

        self.dynamics.update(self.frametime)

        '''  self.test.update(self.frametime)
        RESTITUTION = 0.9
        x,y = self.test.position.get()
        if x<0.0 or x>self.DISPLAY_WIDTH:
            self.test.position.x -= self.test.velocity.x*self.frametime
            self.test.velocity.x = -self.test.velocity.x*RESTITUTION
        if y<0.0 or y>self.DISPLAY_HEIGHT:
            self.test.position.y -= self.test.velocity.y*self.frametime
            self.test.velocity.y = -self.test.velocity.y*RESTITUTION

        mousepos = pygame.mouse.get_pos()
        mouserel = pygame.mouse.get_rel()

        if mouserel==(0,0):
            return
        
        a1 = Vector2D(mousepos[0] - mouserel[0], mousepos[1] - mouserel[1]).add(self.test.position.reversed())
        a2 = Vector2D(mousepos[0], mousepos[1]).add(self.test.position.reversed())

        for face in self.test.oriented_faces:
            point = Vector2D.intersection(a1, a2, face[0], face[1])
            if point != None:
                force = Vector2D(mouserel[0], mouserel[1])
                self.test.add_torque(point[0],force)
                self.test.add_force(face,force)
                print point[1]
                break
      '''

    # show the result of everything
    def draw_graphics(self):
        self.display.fill((255,255,255))

        for obj in self.objects:
            obj.draw_phys(self.display)
    
    # all game code runs from here
    # updates state, graphics, flips the screen
    def loop(self):
        self.active = True

        while self.active:
            self.update_state()
            self.draw_graphics()
            pygame.display.flip()
            millis =  self.clock.tick(self.FRAMERATE) # limit app speed
            self.set_frametime(millis) 

    # starts everything
    def run(self):
        pygame.init()
        self.setup_display()
        self.loop() # does not return until game is finished
        self.stop()

    def stop(self):
        pygame.quit()


def main():
    app = AppState()
    app.run()

if __name__=="__main__":
    main()
