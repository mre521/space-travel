'''
Created on Mar 22, 2014

@author: eric
'''


import math

import pygame.mixer
import pygame.draw
import pygame.image
import pygame.font

from vector import Vector2D
from physics import Object2D
import physics


BGM_STOPPED = 2352
class BGM(object):
    '''
    Encapsulates background music functionality.
    '''
    def __init__(self, filename):
        self.filename = filename
        
    def play(self, volume):
        pygame.mixer.music.set_endevent(BGM_STOPPED)
        pygame.mixer.music.load(self.filename)
        pygame.mixer.music.set_volume(volume)
        pygame.mixer.music.play(-1)
        
    def pause(self):
        pygame.mixer.pause()
        
    def stop(self, time):
        pygame.mixer.music.fadeout(time)
        
    @staticmethod
    def playing():
        return pygame.mixer.music.get_busy()

class BGImage(object):
    '''
    Encapsulates background image functionality.
    '''
    def __init__(self, filename, width, height):
        self.load(filename, width, height)
        
    def load(self, filename, width, height):
        self.filename = filename
        self.dimensions = (width, height)
        
        if filename != None:
            self.image = pygame.image.load(filename).convert()
            self.image_scaled = pygame.transform.smoothscale(self.image, self.dimensions)
        else:
            self.image = None
            self.image_scaled = None
        
    def set_scaled(self, scaled):
        self.scaled = scaled
        
    def get_surface(self):
        if self.scaled == False:
            return self.image
        else:
            return self.image_scaled
        
    def draw(self, dest):
        surface = self.get_surface()
        return dest.blit(surface, (0,0))
        
pygame.font.init()
TITLE_FONT = pygame.font.Font("fonts/Rase-GPL-Bold.otf", 40)

class RenderedText(object):
    def __init__(self, font, text, color, antialias=True, background=None, underline=False, bold=False, italic=False):
        self.font = font
        self.text = text
        
        font.set_underline(underline)
        font.set_bold(bold)
        font.set_italic(italic)
        
        # required for font.render to function properly when None is
        # given for background
        if background == None:
            self.surface = font.render(text, antialias, color).convert_alpha()
        else:
            self.surface = font.render(text, antialias, color, background).convert()
            
        
        self.set_position((0,0))
        self.set_center_x(False)
        self.set_center_y(False)
        
        
    def get_width(self):
        return self.surface.get_width()
    
    def get_height(self):
        return self.surface.get_height()
    
    def set_position(self, position):
        self.position = position
        
    def set_center_x(self, center_x):
        self.center_x = center_x
        self.offset_x = self.get_width()/2
        
    def set_center_y(self, center_y):
        self.center_y = center_y
        self.offset_y = self.get_height()/2
        
    def get_real_position(self):
        return (self.position[0]-self.offset_x, self.position[1]-self.offset_y)
    
    def get_Rect(self):
        return pygame.Rect(self.get_real_position(), self.get_width(), self.get_height())
    
    def draw(self, surface):
        real_position = self.get_real_position()
        return surface.blit(self.surface, real_position)
        
        
class Screen(object):
    '''
    Encapulates one screen of the game.
    
    Provides the basic framework for event handling,
    updating, drawing, background music, and background image.
    
    Should be subclassed to create different game screens
    such as title screen or in-game.
    '''

    def __init__(self, width, height, app, display):
        '''
        Creates this Screen with a width and height to be shown
        on display. 
        
        '''
        self.width = width
        self.height = height
        
        self.app_parent = app
        
        self.rect = pygame.Rect(0, 0, width, height)
        
        self.display = display
        
        self.set_bgm(None)
        self.set_bg_image(None)
        self.set_bg_scaled(False)
        self.set_should_draw_bg(False)
        
    def get_width(self):
        return self.width
    
    def get_height(self):
        return self.height
    
    def get_rect(self):
        return self.rect
    
    def get_display(self):
        return self.display
    
    def set_bgm(self, filename):
        if filename != None:
            self.bgm = BGM(filename)
        else:
            self.bgm = None
        
    def set_bgm_volume(self, volume):
        self.bgm_volume = volume
        
    def set_bgm_fadetime(self, time):
        self.bgm_fadetime = time
        
    def start_bgm(self):
        self.bgm.play(self.bgm_volume)
        
    def stop_bgm(self):
        self.bgm.stop(self.bgm_fadetime)
        
    def set_bg_image(self, filename):
        self.bg = BGImage(filename, self.get_width(), self.get_height())
            
    def set_bg_scaled(self, scaled):
        self.bg.set_scaled(scaled)
        
    def get_bg_image(self):
        return self.bg.get_surface()
        
    def set_should_draw_bg(self, draw):
        self.draw_bg = draw
        
    def activate(self):
        '''
        Set up things when this screen is to be shown.
        Examples are things which run in the background
        '''
        if self.bgm != None:
                if BGM.playing() == True:
                    self.bgm_wait = True
                else:
                    self.start_bgm()
                    
    
    def deactivate(self):
        '''
        Stop tasks when this screen is not being viewed.
        Examples include BGM and other background tasks
        '''
        if self.bgm != None:
            self.stop_bgm()
            
    def handle_events(self, events):
        for event in events:
            if event.type == BGM_STOPPED and self.bgm_wait == True:
                self.start_bgm()
            else:
                self.handle_event(event)
            
    def handle_event(self, event):
        pass
    
    def update(self, frametime):
        pass
    
    def draw(self):
        if self.draw_bg == True:
            self.bg.draw(self.display)



class TitleScreen(Screen):
    '''
    Does the game's title screen.
    '''
    def __init__(self, width, height, app, display):
        Screen.__init__(self, width, height, app, display)
        pygame.mixer.init()
        
        self.set_bgm("SATELL.S3M")
        self.set_bgm_volume(0.5)
        self.set_bgm_fadetime(1000)
        
        self.set_bg_image("TitleBG.jpg")
        self.set_bg_scaled(True)
        self.set_should_draw_bg(True)
        
        self.title_text = RenderedText(TITLE_FONT, "GAME NAME HERE", (0, 255, 0))
        self.title_text.set_center_x(True)
        self.title_text.set_center_y(True)
        self.title_text.set_position((2*self.display.get_width()/3, self.display.get_height()/2))
        
        self.angle = 0
        self.prevrect = None
        
    def activate(self):
        Screen.activate(self)
        pygame.display.flip()
        
    def deactivate(self):
        Screen.deactivate(self)
    
    def handle_event(self, event):
        # close screen when mouse clicked
        if event.type == pygame.MOUSEBUTTONUP:
            self.app_parent.screen_close()
            
    def update(self, frametime):
        
        # Just a quick little test
        self.angle += math.pi * frametime
        if self.angle >= 2*math.pi:
            self.angle -= 2*math.pi
        self.title_text.set_position((int(100*math.sin(self.angle) + self.display.get_width()/2),  self.display.get_height()/2))
                
    def draw(self):
        Screen.draw(self)
        textrect = self.title_text.draw(self.display)
        pygame.display.flip()
        
    
